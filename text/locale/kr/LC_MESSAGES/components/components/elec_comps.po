#
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example v0.3.6\n"
"Report-Msgid-Bugs-To: mail@modelica.co.kr\n"
"POT-Creation-Date: 2023-01-28 22:37+0000\n"
"PO-Revision-Date: 2023-03-12 22:37+0000\n"
"Last-Translator: Baek Youngjin, mail@modelica.co.kr / Ha HyeonSu, <iloveyou934671@gmail.com>\n"
"Language-Team: modelica.co.kr <mail@modelica.co.k>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"


#: ../../source/components/components/elec_comps.rst:4
msgid "Electrical Components"
msgstr ""
"전기 구성요소(Electrical Components)"

#: ../../source/components/components/elec_comps.rst:6
msgid ""
"The previous section discussed how to create component models in the heat"
" transfer domain.  Now let's turn our attention to how to construct some "
"basic electrical components and then use them to simulate the kinds of "
"systems we saw in our previous :ref:`electrical example <elec-example>`."
msgstr ""
"이전 열 전달 도메인섹션에서 구성 요소 모델을 생성하는 방법에 대해 설명했습니다. "
"이제 몇 가지 기본 전기 구성 요소를 구성한 다음, 이를 사용하여 앞서 다룬 :ref:`elec-example` 에서 본 시스템과 같은 종류를 시뮬레이션하는 방법에 대해 살펴보겠습니다."


#: ../../source/components/components/elec_comps.rst:12
msgid ""
"In this section we will implement the basic electrical component models "
"**twice**.  The first time through, we will implement each component "
"without any regard to the others.  But the second time through, we'll see"
" how we can use the inheritance mechanism in Modelica to make our lives a"
" little easier."
msgstr ""
"이 섹션에서는 기본 전기 부품 모델을 **두 번** 구현해야합니다."
"첫번째는 다른 구성 요소를 고려하지 않고 각 구성 요소를 구현하고, 두 번째로 모델리카의 상속 메커니즘을 사용하여 조금더 쉽게 모델을 만드는 방법을 살펴보겠습니다."


#: ../../source/components/components/elec_comps.rst:18
msgid ""
"But in both cases, we'll use the same connector definitions.  In our "
"discussion of :ref:`simple-domains`, we saw how to construct an "
"electrical connector.  As with the previous section on heat transfer, the"
" examples in this section will rely on the connector definitions from the"
" Modelica Standard Library.  Those connector definitions look like this:"
msgstr ""
"두 경우 모두 동일한 커넥터 정의를 사용할 것이며, :ref:`simple-domains` 에서 다루었던 전기 커넥터를 구성하는 방법을 활용 하겠습니다."
"열 전달에 대한 이전 섹션과 마찬가지로 이 섹션의 예제는 모델리카 표준 라이브러리의 커넥터를 사용합니다."
"해당 커넥터 정의는 다음과 같습니다.


#: ../../source/components/components/elec_comps.rst:38
msgid "Basic Component Models"
msgstr ""
"기본 구성요소 모델(Basic Component Models)"

#: ../../source/components/components/elec_comps.rst:40
msgid ""
"Given these ``connector`` definitions, it is relatively straightforward "
"to construct a resistor model.  The goal of a resistor model is to "
"encapsulate the relationship between the voltage across the resistor and "
"the current through the resistor using Ohm's law. The following model "
"represents how one might expect such a resistor model to look:"
msgstr ""
"이러한 ``connector`` 정의가 주어지면 비교적 간단하게 저항 모델을 구성할 수 있습니다. "
"저항기 모델의 목표는 옴의 법칙을 사용하여 저항기에 걸리는 전압과 저항기를 통과하는 전류 사이의 관계를 구현하는 것입니다."
"다음 모델은 이러한 저항기 모델의 모양에서 예상할 수 있는 방법을 나타냅니다."


#: ../../source/components/components/elec_comps.rst:52
msgid "In the same way, we might create inductor and capacitor models as follows:"
msgstr ""
"같은 방식으로 다음과 같이 인덕터 및 커패시터 모델을 생성할 수 있습니다."

#: ../../source/components/components/elec_comps.rst:65
msgid ""
"The important thing to notice about these models is the amount of common "
"code shared between them.  In software development, this kind of "
"redundancy is frowned upon.  In fact, a common software maxim is "
"\"Redundancy is the root of all evil\".  The reason this redundancy is a "
"problem is partly because you are doing the same work multiple times, but"
" also because this code needs to be *maintained* as well.  When you "
"repeat code and then find a mistake in that code, you have to fix it "
"everywhere."
msgstr ""
"이러한 모델에 대해 주목해야 할 중요한 사항은 모델 간에 공유되는 공통 코드의 양입니다."
"소프트웨어 개발에서 이러한 종류의 중복성은 눈살을 찌푸리게 합니다. "
"사실, 일반적인 소프트웨어 격언은 "중복성은 모든 악의 근원이다"입니다."
"이러한 중복성이 문제가 되는 이유는 부분적으로는 동일한 작업을 여러 번 수행하기 때문이기도 하지만, 이 코드도 *유지* 해야 하기 때문입니다."
"코드를 반복하다가 해당 코드에서 실수를 발견하면 모든 곳에서 수정해야 합니다."


#: ../../source/components/components/elec_comps.rst:77
msgid "The DRY Principle"
msgstr ""
"DRY 원칙(The DRY Principle)"

#: ../../source/components/components/elec_comps.rst:79
msgid ""
"This issue of redundancy is an important one.  So let's revisit building "
"models of resistors, inductors and capacitors with the goal of reducing "
"the amount of repeated code.  In software, there is something called the "
"*DRY principle* where DRY stands for \"Don't Repeat Yourself\".  So our "
"next step is to make our resistor, capacitor and inductor models DRY."
msgstr ""
"이러한 중복 문제는 중요한 문제입니다."
"따라서 반복되는 코드의 양을 줄이는 것을 목표로 저항, 인덕터 및 커패시터의 빌딩 모델을 다시 살펴보겠습니다. "
"소프트웨어에는 *DRY 원칙* 이라는 것이 있는데, 여기서 DRY는 "Don't Repeat Yourself"를 의미합니다. "
"따라서, 여기서  해야할 다음 단계는 저항, 커패시터 및 인덕터 모델을 DRY로 만드는 것입니다."


#: ../../source/components/components/elec_comps.rst:88
msgid ""
"The key to eliminating redundant code is to identify all the common code "
"between these models and create a ``partial`` model that we can inherit "
"from.  We highlighted the common lines previously.  Now we can capture "
"them in their own model as follows:"
msgstr ""
"중복 코드를 제거하는 핵심은 이러한 모델 간의 모든 공통 코드를 식별하고 상속할 수 있는 ``부분(partial)`` 모델을 만드는 것입니다. "
"앞에서 공통된 라인(코드)을 강조 표시했습니다. "
"이제 다음과 같이 모델에서 구현 할 수 있습니다."


#: ../../source/components/components/elec_comps.rst:97
msgid ""
"In summary, we've extracted the declarations for ``p``, ``n`` and ``v`` "
"from the previous models into this model.  We've also included a "
"variable, ``i``, to represent the current flowing from pin ``p`` to pin "
"``n``.  Finally, the conservation of charge equation is also included."
msgstr ""
"요약하면 이전 모델에서 ``p``, ``n`` 및 ``v`` 에 대한 선언을 이 모델로 만들었고, 핀 ``p`` 에서 핀 ``n`` 으로 흐르는 전류를 나타내는 변수 ``i`` 도 포함했습니다. "
"마지막으로 전하 보존 방정식도 구현하였습니다."

 
#: ../../source/components/components/elec_comps.rst:103
msgid ""
"Creating such a model then allows us to create a much more succinct "
"resistor model as follows:"
msgstr ""
"이러한 모델을 생성하면 다음과 같이 훨씬 더 간결한 저항 모델을 생성할 수 있습니다."

#: ../../source/components/components/elec_comps.rst:110
msgid ""
"There are several things to notice about this ``Resistor`` model.  The "
"first is how much shorter it is.  This is because we inherit the "
"electrical pins, the conservation of charge equation and the variables "
"``v`` and ``i`` from the ``TwoPin`` model.  Another thing to notice is "
"that, by leverage the definitions of ``v`` and ``i``, Ohm's law looks "
"just like it would if you saw it in a text book."
msgstr ""
"이 ``Resistor`` 모델에 대해 주목해야 할 몇 가지 사항이 있습니다. "
"첫 번째는 얼마나 짧은가 인데, 이는 ``TwoPin`` 모델에서 전기 핀, 전하 보존 방정식, 변수 ``v`` 및 ``i`` 를 물려받았기 때문에 짧아질 수 있었습니다. "
"두 번째는 ``v`` 와 ``i`` 의 정의를 활용하면 옴의 법칙이 마치 교과서에서 본 것처럼 보인다는 것입니다."



#: ../../source/components/components/elec_comps.rst:117
msgid "We can give the same treatment to our inductor and capacitor models:"
msgstr ""
"인덕터 및 커패시터 모델 또한 동일한 방법을 사용할 수 있습니다. "

#: ../../source/components/components/elec_comps.rst:127
msgid ""
"Again, we see that the models are much more succinct.  Ultimately, "
"factoring out common code in this way means that the component models are"
" easier to write and easier to maintain."
msgstr ""
"다시 말하지만, 모델이 훨씬 더 간결하다는 것을 알 수 있습니다. "
"궁극적으로 이러한 방식으로 공통 코드를 제외하면 구성 요소 모델을 더 쉽게 작성하고 유지 관리할 수 있습니다."


#: ../../source/components/components/elec_comps.rst:132
msgid "Circuit Model"
msgstr ""
"회로 모델(Circuit Model)"

#: ../../source/components/components/elec_comps.rst:134
msgid ""
"So far, we've only built component models.  In order to create a circuit "
"model we first need to define a few more component models. Specifically, "
"we need to create a step voltage source model:"
msgstr ""
"지금까지는 구성 요소 모델만 구축했는데, 회로 모델을 생성하려면 먼저 몇 가지 구성 요소 모델을 더 정의해야 합니다."
"특히 스텝 전압 소스 모델을 생성해야 합니다."


#: ../../source/components/components/elec_comps.rst:142
msgid ""
"Note how the ``StepVoltage`` model also leverages the ``TwoPin`` model.  "
"We will also need a ground model which we model as follows:"
msgstr ""
"``StepVoltage`` 모델이 ``TwoPin`` 모델을 활용하는 방법을 살펴볼 필요가 있습니다. "

"그리고, 다음과 같이 그라운드(접지) 모델이 필요합니다."


#: ../../source/components/components/elec_comps.rst:149
msgid ""
"The ``Ground`` model has only one pin so it cannot inherit from "
"``TwoPin``.  Recall how we described the :ref:`amb-cond` model from our "
"discussion on :ref:`heat-transfer-components` an infinite reservoir.  The"
" ``Ground`` model serves a very similar purpose.  No matter how much "
"current flows in to or out of an electrical ground, the voltage remains "
"zero."
msgstr ""
"``Ground`` 모델은 핀이 하나만 있으므로 ``TwoPin`` 에서 상속할 수 없습니다. "
":ref:`heat-transfer-components` 무한 저장소에 대해서 다룰때 :ref:`amb-cond` 모델을 어떻게 설명했는지 기억해보면, "
"``Ground`` 모델은 그와 매우 유사한 목적을 가지고 있는 것을 알 수 있습니다. "
"매우 많은 전류가 전기 접지로 흐르거나 흘러도 전압은 0으로 유지됩니다."



#: ../../source/components/components/elec_comps.rst:156
msgid ""
"Having defined all these components, we can now create a circuit model as"
" follows:"
msgstr ""
"이러한 구성 요소를 모두 정의했으므로 이제 다음과 같이 회로 모델을 만들 수 있습니다."

#: ../../source/components/components/elec_comps.rst:162
msgid "The schematic diagram for this model is rendered as:"
msgstr ""
"이 모델의 개략도는 다음과 같이 그려집니다."

#~ msgid "partial"
#~ msgstr ""

