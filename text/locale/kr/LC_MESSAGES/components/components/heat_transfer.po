#
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example v0.3.6\n"
"Report-Msgid-Bugs-To: mail@modelica.co.kr\n"
"POT-Creation-Date: 2023-01-28 22:37+0000\n"
"PO-Revision-Date: 2023-03-12 22:37+0000\n"
"Last-Translator: Baek Youngjin, mail@modelica.co.kr / Ha HyeonSu, <iloveyou934671@gmail.com>\n"
"Language-Team: modelica.co.kr <mail@modelica.co.k>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"


#: ../../source/components/components/heat_transfer.rst:4
msgid "Heat Transfer Components"
msgstr ""
"열 전달 구성 요소(Heat Transfer Components)"

#: ../../source/components/components/heat_transfer.rst:6
msgid ""
"We'll start our discussion of component models by building some component"
" models in the heat transfer domain.  These models will allow us to "
"recreate the models we saw :ref:`previously <getting-physical>`, but this"
" time using component models to represent each of the various effects.  "
"Investing the time to make component models will then allow us to easily "
"combine the underlying physical behavior to create models for a wide "
"variety of thermal systems."
msgstr ""
"열 전달 영역에서 일부 구성 요소 모델을 만들어가면서 "구성 요소 모델"에 대한 논의를 시작하겠습니다. "
"이러한 모델을 사용하면 :ref:`이전에 <getting-physical>` 본 모델을 다시 만들어 볼 수 있지만, 이번에는 구성 요소 모델을 사용하여 각각에 대한 다양한 효과를 나타내겠습니다. "
"구성 요소 모델을 만드는 데 시간을 투자하면 기본 물리적 동작을 쉽게 결합하여 다양한 열 시스템에 대한 모델을 만들 수 있습니다."


#: ../../source/components/components/heat_transfer.rst:15
msgid "Thermal Connectors"
msgstr ""
"열 커넥터(Thermal Connectors)"

#: ../../source/components/components/heat_transfer.rst:17
msgid ""
"In our previous discussion on :ref:`simple-domains` we described how a "
"thermal connector could be described.  For the component models in this "
"section, we will utilize the thermal connector models from the Modelica "
"Standard Library.  These connectors are defined as follows:"
msgstr ""
"앞서 다룬 :ref:`simple-domains` 에서 열 커넥터를 설명하고 다루었습니다. "
"이 섹션의 구성 요소 모델의 경우 모델리카 표준 라이브러리의 열 커넥터 모델을 활용 하겠으며,"
"이 커넥터는 다음과 같이 정의합니다."


#: ../../source/components/components/heat_transfer.rst:59
msgid ""
"Careful inspection of these connector definitions shows that "
"``HeatPort_a`` and ``HeatPort_b`` are identical in terms of their content"
" to the ``HeatPort`` model.  The only difference is that ``HeatPort_a`` "
"and ``HeatPort_b`` have distinguishing graphical icons."
msgstr ""
"이 커넥터 정의를 주의 깊게 살펴보면 ``HeatPort_a`` 와 ``HeatPort_b`` 가 ``HeatPort`` 모델에 대한 콘텐츠 측면에서 동일하다는 것을 알 수 있습니다. "
"유일한 차이점은 ``HeatPort_a`` 와 ``HeatPort_b`` 에는 구별되는 그래픽 아이콘이 있다는 것입니다."



#: ../../source/components/components/heat_transfer.rst:64
msgid ""
"The component models presented in the remainder of this section will "
"utilize these connector definitions."
msgstr ""
"이 섹션의 나머지 부분에 제시된 구성 요소 모델은 이러한 커넥터 정의를 활용합니다."

#: ../../source/components/components/heat_transfer.rst:68
msgid "Component Models"
msgstr ""
"구성요소 모델(Component Models)"

#: ../../source/components/components/heat_transfer.rst:70
msgid ""
"When building component models, the goal is to create component models "
"that implement (only) one physical effect (*e.g.,* capacitance, "
"convection).  By implementing component models in this way, we will see "
"that they can then be combined in any infinite number of different "
"configurations without the need to add any more equations.  This kind of "
"reuse of equations makes the model developer more productive and avoids "
"opportunities to introduce errors."
msgstr ""
"구성 요소 모델을 구축할 때 목표는 하나의 물리적 효과(*예:* 정전 용량, 대류)만 구현하는 구성 요소 모델을 만드는 것입니다."
"이러한 방식으로 구성 요소 모델을 구현하면 더 이상 방정식을 추가할 필요 없이 무한한 수의 다양한 구성으로 결합할 수 있음을 알 수 있습니다."
"방정식 재사용은 모델 개발자의 생산성을 높이고 오류가 발생할 기회를 방지합니다."



#: ../../source/components/components/heat_transfer.rst:81
msgid "Thermal Capacitance"
msgstr ""
"열 용량(Thermal Capacitance)"

#: ../../source/components/components/heat_transfer.rst:83
msgid ""
"Our first component model will be a model of lumped thermal capacitance "
"with uniform temperature distribution. The equation we wish to associate "
"with this component model is:"
msgstr ""
"첫 번째 다룰 구성 요소 모델은 균일한 온도 분포를 갖는 집중 열 용량 모델입니다."
"이 구성 요소 모델과 연결하려는 방정식은 다음과 같습니다."


#: ../../source/components/components/heat_transfer.rst:88
msgid "C \\dot{T} = Q_{flow}"
msgstr ""

#: ../../source/components/components/heat_transfer.rst:92
msgid ""
"The Modelica model (with the ``Icon`` annotation removed) representing "
"this equation is quite simple:"
msgstr ""
"이 방정식을 나타내는 모델리카 모델(``Icon`` 주석이 제거됨)은 매우 간단합니다."

#: ../../source/components/components/heat_transfer.rst:99
msgid ""
"where ``C`` is the thermal capacitance and ``T0`` is the initial "
"temperature."
msgstr ""
"여기서 ``C`` 는 열용량이고 ``T0`` 은 초기 온도입니다."



#: ../../source/components/components/heat_transfer.rst:102
msgid ""
"Note the presence of the ``node`` connector in this model.  This is how "
"the ``ThermalCapacitance`` component model interacts with the \"outside "
"world\".  We will use the temperature at the ``node``, ``node.T`` to "
"represent the temperature of the thermal capacitance. The ``flow`` "
"variable, ``node.Q_flow``, represents the flow of heat **into** the "
"thermal capacitance.  We can see this when looking at the equation for "
"the thermal capacitance:"
msgstr ""
"이 모델에는 ``node`` 커넥터가 있다는 점에 유의해야 합니다."
"이것이 ``ThermalCapacitance`` 컴포넌트 모델이 "외부 세계"와 상호 작용하는 방식입니다. "
"``node``, ``node.T`` 의 온도를 사용하여 열용량의 온도를 나타냅니다. "
"``flow`` 변수인 ``node.Q_flow`` 는 열 용량 **으로** 열의 흐름을 나타냅니다."
"열용량 방정식을 보면 다음과 같은 사실을 알 수 있습니다."

#: ../../source/components/components/heat_transfer.rst:114
msgid ""
"Note that when ``node.Q_flow`` is positive, the temperature of the "
"thermal capacitance, ``node.T``, will increase.  This confirms that we "
"have followed the Modelica convention that ``flow`` variables on a "
"connector represent a flow of the conserved quantity, heat in this case, "
"into the component (a more thorough discussion of :ref:`flow-signs` will "
"be presented shortly)."
msgstr ""
"``node.Q_flow`` 가 양수이면 열 용량인 ``node.T`` 의 온도가 상승합니다. "
"이는 커넥터의 ``flow`` 변수가 보존된 양(이 경우 열)의 흐름을 구성 요소로 나타내는 모델리카 규칙을 따랐음을 확인합니다"
"(:ref:`flow-signs` 에 대한 자세한 설명은 곧 논의될 것입니다)."


#: ../../source/components/components/heat_transfer.rst:121
msgid ""
"Using this model alone, we can already build a simple \"system\" model as"
" follows:"
msgstr ""
"이 모델만 사용하여 다음과 같이 간단한 "시스템" 모델을 이미 구축할 수 있습니다."

#: ../../source/components/components/heat_transfer.rst:127
msgid ""
"This model contains only the thermal capacitance element (as indicated by"
" the declaration of the variable ``cap`` of type ``ThermalCapacitance``) "
"and no other heat transfer elements (*e.g.,* conduction, convection, "
"radiation).  Ignore the ``Placement`` annotation for the moment, we'll "
"provide a complete explanation in a later section on :ref:`comp-annos`."
msgstr ""
"이 모델에는 열용량 요소(``ThermalCapacitance`` 유형의 변수 ``cap`` 선언으로 표시됨)만 포함되고 "
"다른 열 전달 요소(예: 전도, 대류, 복사)는 포함되지 않습니다. "
"잠시 ``Placement`` 주석을 무시하겠습니다. "
"구성 요소 모델 주석에 대한 이후 :ref:`comp-annos` 섹션에서 완전한 설명을 제공할 것입니다."



#: ../../source/components/components/heat_transfer.rst:134
msgid ""
"Using the graphical annotations in the model (some of which were left out"
" of the previous listing) it can be rendered as:"
msgstr ""
"모델의 그래픽 주석(일부는 이전 목록에서 제외됨)을 사용하여 다음과 같이 렌더링할 수 있습니다."

#: ../../source/components/components/heat_transfer.rst:143
msgid ""
"Since no heat enters or leaves the thermal capacitance component, "
"``cap``, the temperature of the capacitance remains constant as shown in "
"the following plot:"
msgstr ""
"열 정전 용량 구성요소인 ``cap`` 에 열이 들어오거나 나가지 않기 때문에 정전 용량의 온도는 다음 선도와 같이 일정하게 유지됩니다."

#: ../../source/components/components/heat_transfer.rst:151
msgid "ConvectionToAmbient"
msgstr ""

#: ../../source/components/components/heat_transfer.rst:153
msgid ""
"To quickly add some heat transfer, we could define another component "
"model to represent heat transfer to some ambient temperature.  Such a "
"model could be represented in Modelica (again, without the ``Icon`` "
"annotation) as follows:"
msgstr ""
"열 전달관련 다른 부분을 신속하게 추가하기 위해, 주변 온도에 대한 열 전달을 나타내는 다른 구성 요소 모델을 정의할 수 있습니다."
"이러한 모델은 다음과 같이 모델리카에서 (역시 ``Icon`` 주석 없이) 나타낼 수 있습니다."


#: ../../source/components/components/heat_transfer.rst:162
msgid ""
"This model includes parameters for the heat transfer coefficient, ``h``, "
"the surface area, ``A`` and the ambient temperature, ``T_amb``. This "
"model is attached to other heat transfer elements through the connector "
"``port_a``."
msgstr ""
"이 모델에는 열 전달 계수 ``h``, 표면적 ``A`` 및 주변 온도 ``T_amb`` 에 대한 파라미터를 가지고 있고, 커넥터 ``port_a`` 를 통해 다른 열 전달 요소에 연결됩니다."


#: ../../source/components/components/heat_transfer.rst:167
msgid ""
"Again, we must pay close attention to the sign convention.  Recall from "
"our previous discussion of :ref:`thermal-capacitance` that Modelica "
"follows a sign convention that a positive value for a ``flow`` variable "
"represents flow into the component.  In particular, let's take a close "
"look at the equation in the ``ConvectionToAmbient`` model:"
msgstr ""
"다시 말하지만, 부호 정의에 세심한 주의를 기울여야 합니다. "
"모델리카가 ``flow`` 변수에 대한 양수 값이 구성 요소로 들어오는 흐름을 나타내는 부호 규칙을 따른다고 언급한 이전 :ref:`thermal-capacitance` 을 다시 생각해 보겠습니다."
"특히 ``ConvectionToAmbient`` 모델의 방정식을 자세히 살펴보겠습니다."
 
#: ../../source/components/components/heat_transfer.rst:178
msgid ""
"Note that when ``port_a.T`` is greater than ``T_amb``, the sign of "
"``port_a.Q_flow`` is positive.  That means heat is flowing **into** this "
"component.  In other words, when ``port_a.T`` is greater than ``T_amb``, "
"this component will **take heat away** from ``port_a`` (and, conversely, "
"when ``T_amb`` is greater than ``port_a.T``, it will **inject heat into**"
" ``port_a``)."
msgstr ""
"``port_a.T`` 가 ``T_amb`` 보다 크면 ``port_a.Q_flow`` 의 부호는 양수입니다. "
"이는 열이 이 구성 요소에 **내부로** 흐르고 있음을 의미합니다. "
"즉, ``port_a.T`` 가 ``T_amb`` 보다 크면 이 구성 요소는 ``port_a`` 에서 열을 **가져옵니다**."
"(반대로 ``T_amb`` 가 ``port_a.T`` 보다 더 크면 열을 ``port_a`` 에 **주입 합니다**."



#: ../../source/components/components/heat_transfer.rst:185
msgid ""
"Having such a component model available enables us to combine it with the"
" ``ThermalCapacitance`` model and simulate a system just like we modeled "
"in :ref:`some of our earlier heat transfer examples <getting-physical>` "
"using the following Modelica code:"
msgstr ""
"이러한 구성 요소 모델을 사용할 수 있게 되면 이를 ``ThermalCapacitance`` 모델과 결합하고, 다음 모델리카 코드를 사용하여 "
":ref:`이전 열 전달 예제에서 모델링한 것 <getting-physical>` 처럼 시스템을 시뮬레이션할 수 있습니다."

#: ../../source/components/components/heat_transfer.rst:195
msgid ""
"In this model, we see two components have been declared, ``cap`` and "
"``conv``.  The parameters for each of these components are also specified"
" when they are declared.  The following is a schematic for the "
"``CoolingToAmbient`` model:"
msgstr ""
"이 모델에서는 ``cap`` 과 ``conv`` 라는 두 가지 구성 요소가 선언된 것을 볼 수 있습니다. "
"이러한 각 구성 요소에 대한 파라미터도 선언될 때 지정됩니다. "
"다음은 ``CoolingToAmbient`` 모델의 개략도입니다."


#: ../../source/components/components/heat_transfer.rst:206
msgid "But what is really remarkable about this model is the equation section:"
msgstr ""
"하지만 이 모델에서 정말 놀라운 점은 방정식 섹션입니다."

#: ../../source/components/components/heat_transfer.rst:213
msgid ""
"This statement introduces one of the most important features in Modelica."
"  Note that statement appears within an ``equation`` section.  While the "
"``connect`` operator looks like a function, it is much more than that.  "
"It represents the equations that should be generated to model the "
"interaction between the two specified connectors, ``cap.node`` and "
"``conv.port_a``."
msgstr ""
"이제 모델리카에서 가장 중요한 기능 중 하나를 소개하겠습니다. "
"이 명령문은 ``equation`` 섹션에 구현합니다."
"``connect`` 연산자는 함수처럼 보이지만 그 이상의 기능을 가지고 있습니다."
"지정된 두 커넥터인 ``cap.node`` 및 ``conv.port_a`` 간의 상호 작용을 모델링하기 위해 생성해야 하는 방정식을 만드는 것이 그것입니다."


#: ../../source/components/components/heat_transfer.rst:220
msgid ""
"In this context, a connection does two important things.  The first thing"
" it does is to generate an equation that equates the \"across\" variables"
" on either connector.  In this case, that means the following equation:"
msgstr ""
"이 컨텍스트에서 연결은 두 가지 중요한 작업을 수행합니다."
"첫 번째 작업은 두 커넥터 중 하나에서 "교차" 변수를 동일시하는 방정식을 생성하는 것입니다. "
"이 예제의 경우는 다음 방정식을 의미합니다."


#: ../../source/components/components/heat_transfer.rst:229
msgid ""
"In addition, a connection generates an equation for all the through "
"variables as well.  The equation that is generated is a conservation "
"equation.  You can think of this conservation equation as a "
"generalization of Kirchoff's current law to any conserved quantity. "
"Basically, it represents the fact that the connection itself has no "
"\"storage\" ability and that whatever amount of the conserved quantity, "
"in this case heat, that flows out of one component must go into the "
"other(s).  So in this case, the connect statement will generate the "
"following equation with respect to the ``flow`` variables:"
msgstr ""
"두번째로, 이러한 연결은 모든 통과 변수에 대한 방정식도 생성합니다."
"여기서 생성되는 방정식은 보존 방정식입니다. "
"이 보존 방정식은 보존된 양에 대한 Kirchoff의 전류 법칙을 일반화한 것으로 생각할 수 있습니다. "
"기본적으로 연결 자체에는 "저장" 기능이 없으며 한 구성 요소에서 흘러나오는 보존된 양(이 경우 열)이 얼마이든지 다른 구성 요소로 들어가야 한다는 사실을 나타냅니다. "
"따라서 이 경우 connect 문은 ``flow`` 변수와 관련하여 다음 방정식을 생성합니다."



#: ../../source/components/components/heat_transfer.rst:243
msgid ""
"Note the sign convention here.  All the ``flow`` variables are summed. We"
" will examine more complex cases shortly where multiple components are "
"interacting.  But in this simple case, with only two components, we see "
"clearly that if one value for ``Q_flow`` is positive, the other must be "
"negative.  In other words, if heat is flowing out of one component, it "
"must be flowing into another.  These conservation equations ensure that "
"we have a proper accounting of conserved quantities throughout our "
"network and that no amount of the conserved quantity gets \"lost\"."
msgstr ""
"여기에서도 기호 규칙에 유의 해야하는데, 이 지점에서 모든 ``flow`` 변수가 합산 되기 때문입니다."
"여러 구성 요소가 상호 작용하는 보다 복잡한 사례를 이후에 살펴보겠습니다. "
"그러나 두 개의 구성 요소만 있는 이 간단한 경우에서 ``Q_flow`` 에 대한 하나의 값이 양수이면 다른 하나는 음수여야 한다는 것을 분명히 알 수 있습니다. "
"즉, 한 구성 요소에서 열이 흐르면 다른 구성 요소로 흐르고 있어야 합니다. "
"이러한 보존 방정식은 네트워크 전체에서 보존된 수량을 적절하게 설명하고 보존된 수량의 양이 "손실"되지 않도록 합니다."



#: ../../source/components/components/heat_transfer.rst:253
msgid ""
"A very simple way to summarize the behavior of a connection, in the "
"context of a thermal problem, is to **think of a connection as a "
"perfectly conducting element with no thermal capacitance**."
msgstr ""
"열 문제의 맥락에서 연결 동작을 단순하게 생각하는 매우 간단한 방법은 **연결을 열 정전용량이 없는 완전 전도성 요소로 생각하는 것** 입니다."

#: ../../source/components/components/heat_transfer.rst:257
msgid ""
"If we simulate the ``CoolingToAmbient`` model above, we get the following"
" temperature trajectory:"
msgstr ""
"위의 ``CoolingToAmbient`` 모델을 시뮬레이션하면 다음과 같은 온도 궤적을 얻습니다."

#: ../../source/components/components/heat_transfer.rst:266
msgid "Digging Deeper"
msgstr ""
"깊게 살펴보기(Digging Deeper)"

#: ../../source/components/components/heat_transfer.rst:268
msgid ""
"There is one slight issue with the ``CoolingToAmbient`` model.  We "
"mentioned earlier that when building component models it is best to "
"isolate each individual physical effect to its own component.  But we've "
"actually lumped two different effects into one component.  As we will see"
" in a moment, this limits the reusability of the component models. But "
"first, let's refactor the code to separate these effects out and then "
"we'll revisit the system level model using these new components."
msgstr ""
"``CoolingToAmbient`` 모델에는 약간의 문제가 있습니다. "
"이전에 구성 요소 모델을 구축할 때 각 개별 물리적 효과를 자체 구성 요소로 분리하는 것이 가장 좋다고 언급했습니다. "
"그러나 이 모델은 실제로 두 가지 다른 효과를 하나의 구성 요소로 묶었습니다. "
"잠시 후에 살펴보겠지만 이는 구성 요소 모델의 재사용성을 제한합니다. "
"먼저 코드를 리팩토링하여 이러한 효과를 분리한 다음 이러한 새 구성 요소를 사용하여 시스템 수준 모델을 다시 살펴보겠습니다."


#: ../../source/components/components/heat_transfer.rst:277
msgid "Convection"
msgstr ""
"대류(Convection)"

#: ../../source/components/components/heat_transfer.rst:279
msgid ""
"The first new component is a ``Convection`` model.  In this case, we "
"won't make any assumptions about the temperature at either end. Instead, "
"we'll only assume that each is connected to something with an appropriate"
" thermal connector.  The result is a model like this one:"
msgstr ""
"첫 번째 새 구성 요소는 ``Convection`` 모델인데 이 경우에는 양쪽 끝의 온도에 대해 가정하지 않는대신 각각이 적절한 열 커넥터가 있는 무언가에 연결되어 있다고 가정합니다. "
"결과는 다음과 같은 모델입니다."



#: ../../source/components/components/heat_transfer.rst:288
msgid "This model contains two equations.  The first equation:"
msgstr ""
"이 모델에는 두 개의 방정식이 포함되어 있습니다. 첫 번째 방정식은 아래와 같습니다."

#: ../../source/components/components/heat_transfer.rst:294
msgid ""
"represents the fact that this component does not store heat.  The "
"equation enforces the constraint that whatever heat flows in from one "
"connector must flow out from the other (which is exactly the same "
"behavior we saw from the ``connect`` statement earlier in this section)."
"  The next equation:"
msgstr ""
"이것은 이 구성 요소가 열을 저장하지 않는다는 사실을 알 수 있습니다. "
"방정식은 한 커넥터에서 유입되는 모든 열이 다른 커넥터에서 흘러나와야 한다는 제약 조건을 적용합니다(이 섹션 앞부분의 ``connect`` 문에서 본 동작과 정확히 동일합니다)."
"다음 방정식은 아래와 같습니다."


#: ../../source/components/components/heat_transfer.rst:304
msgid ""
"captures the heat transfer relationship for convection by expressing the "
"relationship between the flow of heat through this component and the "
"temperatures on either end."
msgstr ""
"이 구성 요소를 통하는 열 흐름과 양쪽 끝의 온도 사이의 관계를 표현하여 대류에 대한 열 전달 관계를 표현합니다."

msgid "Number of equations"
msgstr ""
"방정식의 수(Number of equations)"

#: ../../source/components/components/heat_transfer.rst:312
msgid ""
"All our previous models had one connector and one equation.  The "
"``Convection`` model has two connectors.  As a result, it has two "
"equations.  A simple rule of thumb is that you need as many equations as "
"connectors.  But keep in mind that this rule of thumb assumes that you "
"are using connectors with only one through variable on them and no "
"\"internal variables\" in your model (*e.g.,* ``protected`` variables).  "
"The upcoming section on :ref:`model-comps` will provide a more "
"comprehensive discussion on determining how many equations a component "
"requires. Specifically, it will provide guidance on how to build so-"
"called :ref:`balanced-components`."
msgstr ""
"이전에 다룬 모든 모델에는 하나의 커넥터와 하나의 방정식이 있었습니다. "
"그리고 ``대류`` 모델에는 두 개의 커넥터가 있었고 결과적으로 두 개의 방정식이 있습니다. "
"간단히 생각해서 커넥터 수만큼 방정식이 필요하다는 경험 법칙을 생각할 수 있습니다."
"그러나 이 경험 법칙은 하나의 통과 변수만 있는 커넥터를 사용하고 모델에 "내부 변수" (*예:* ``protected`` 변수)가 없다고 가정한 것 입니다."
":ref:`model-comps` 에 대한 다음 섹션에서는 구성 요소에 필요한 방정식 수를 결정하는 데 대해 보다 포괄적으로 논의하겠습니다. "
"구체적으로 소위 :ref:`balanced-components` 를 구축하는 방법에 대한 지침을 보여주겠습니다."


#: ../../source/components/components/heat_transfer.rst:327
msgid "AmbientCondition"
msgstr ""
"주변조건(AmbientCondition)"

#: ../../source/components/components/heat_transfer.rst:329
msgid ""
"Now that we have the convection model, we need something to represent the"
" ambient conditions.  We need something like a thermal capacitance model,"
" but one that maintains a constant temperature.  Imagine if we took the "
"``ThermalCapacitance`` model and gave a very large value for its "
"capacitance, ``C``.  Then we'd have something that changed temperature "
"very slowly.  But what we want is something that doesn't change "
"temperature at all, as if it had a ``C`` value that was infinitely large."
msgstr ""
"이제 대류 모델이 있으므로 주변 조건을 나타낼 무언가가 필요합니다." 
"열용량 모델과 같은 것이 필요하지만 일정한 온도를 유지하는 모델이 필요합니다. "
"``ThermalCapacitance`` 모델에서 커패시턴스가 매우 큰 값인 ``C`` 를 주었다고 상상해 보십시오. "
"그러면 온도를 아주 천천히 변화시키는 무언가를 만들게 될 것입니다만, 사실 우리가 원하는 것은 무한히 큰 ``C`` 값을 가진 것처럼 온도가 전혀 변하지 않는 것입니다."


#: ../../source/components/components/heat_transfer.rst:340
msgid ""
"This kind of model comes up frequently and it is commonly called an "
"\"infinite reservoir\" model.  Typically, such a model is characterized "
"by the fact that no matter how much of the conserved quantity (heat in "
"this case) flows into or out of the component, the across variable "
"remains constant.  In an electrical context, such a model would represent"
" electrical ground.  In a mechanical context, it would represent a "
"mechanical ground (something that didn't change position, regardless of "
"how much force was applied)."
msgstr ""
"이런 종류의 모델이 자주 나오는데 흔히 "무한저수지" 모델이라고 합니다."
"일반적으로 이러한 모델은 보존된 양(이 경우 열)이 얼마나 많이 구성 요소로 유입되거나 유출되더라도 교차 변수가 일정하게 유지된다는 사실을 특징으로 합니다."
"전기적 맥락에서는 이러한 모델은 전기 접지를 나타내고, 기계적인 맥락에서 기계적인 접지를 나타냅니다(적용된 힘의 정도에 관계없이 위치가 변경되지 않은 것)."



#: ../../source/components/components/heat_transfer.rst:349
msgid ""
"We will represent our ambient conditions using the ``AmbientConditions`` "
"model:"
msgstr ""
"``AmbientConditions`` 모델을 사용하여 주변 조건을 나타내 보겠습니다."

#: ../../source/components/components/heat_transfer.rst:356
msgid ""
"Since we are talking about the heat transfer domain, this model is an "
"infinite reservoir for heat and no matter how much heat flows into or out"
" of this component, its temperature remains the same."
msgstr ""
"이 모델은 열에 대한 무한한 저장고이며 이 구성 요소에 얼마나 많은 열이 흐르고 있는지에 관계없이 온도는 동일하게 유지됩니다."

#: ../../source/components/components/heat_transfer.rst:361
msgid "Flexibility"
msgstr ""
"유연성(Flexibility)"

#: ../../source/components/components/heat_transfer.rst:363
msgid ""
"Using these new ``Convection`` and an ``AmbientCondition`` models, we can"
" reconstruct our simple system level heat transfer model using the "
"following:"
msgstr ""
"이러한 새로운 ``Convection`` 및 ``AmbientCondition`` 모델을 사용하여 다음과 같이 간단한 시스템 수준 열 전달 모델을 재구성할 수 있습니다"

#: ../../source/components/components/heat_transfer.rst:370
msgid "When rendered, the model looks like this:"
msgstr ""
"이를 가시화 하면 모델은 다음과 같이 보입니다."

#: ../../source/components/components/heat_transfer.rst:378
msgid ""
"This may not seem like much of an improvement.  Although we went to the "
"trouble to break up the ``ConvectionToAmbient`` model into individual "
"``Convection`` and ``AmbientTemperature`` models, we still end up with "
"the same fundamental behavior, *i.e.,*"
msgstr ""
"이것은 그다지 개선된 것처럼 보이지 않을 수 있는데, "
"``ConvectionToAmbient`` 모델을 개별 ``Convection`` 및 ``AmbientTemperature`` 모델로 어렵게 분해하긴 했지만 여전히 동일한 기본 동작을 하는 것으로 보입니다. "
"*즉,*"


#: ../../source/components/components/heat_transfer.rst:386
msgid ""
"The big benefit of breaking down ``ConvectionToAmbient`` into "
"``Convection`` and ``AmbientTemperature`` models is the ability to "
"recombine them in different ways.  The following schematic is just one "
"example of how the handful of fundamental components we've constructed so"
" far can be rearranged to form an entirely new (and more complex) model:"
msgstr ""
"``ConvectionToAmbient`` 를 ``Convection`` 및 ``AmbientTemperature`` 모델로 분해할 때의 큰 이점은 이들을 다른 방식으로 재결합할 수 있다는 것입니다. "
"다음 회로도는 지금까지 구성한 소수의 기본 구성 요소를 재정렬하여 완전히 새로운(더 복잡한) 모델을 형성하는 방법의 한 예일 뿐입니다."


#: ../../source/components/components/heat_transfer.rst:409
msgid ""
"In fact, with these components we can now make **arbitrarily complex** "
"networks of components and still never have to worry about formulating "
"the associated equations that describe their dynamics.  Everything that "
"is required to do this has already been captured in our component models."
"  This allows us to focus on the process of creating and designing our "
"system and leave the tedious, time-consuming and error prone work of "
"manipulating equations behind."
msgstr ""
"사실 이러한 구성 요소를 사용하여 **임의로 복잡한** 네트워크를 만들 수 있으며 여전히 해당 역학을 설명하는 관련 방정식을 공식으로 표현하는 것에 대해 걱정할 필요가 없습니다."
"이를 수행하는 데 필요한 모든 것이 이미 구성 요소 모델에 구현되어 있으며,"
"이를 통해  시스템을 만들고 설계하는 프로세스에 집중하고 방정식을 조작하는 지루하고 시간 소모적이며 오류가 발생하기 쉬운 작업을 뒤로 할 수 있습니다."


#~ msgid ""
#~ "Our first component model will be "
#~ "a model of lumped thermal capacitance."
#~ " with uniform temperature distribution. The"
#~ " equation we wish to associate with"
#~ " this component model is:"
#~ msgstr ""

#~ msgid ""
#~ "Note that when ``port_a.T`` is greater"
#~ " than ``T_amb``, the sign of "
#~ "``port_a.Q_flow`` is greater than zero.  "
#~ "That means heat is flowing **into** "
#~ "this component.  In other words, when"
#~ " ``port_a.T`` is greater than ``T_amb``,"
#~ " this component will **take heat "
#~ "away** from ``port_a`` (and, conversely, "
#~ "when ``T_amb`` is greater than "
#~ "``port_a.T``, it will **inject heat "
#~ "into** ``port_a``)."
#~ msgstr ""

#~ msgid "connect"
#~ msgstr ""

#~ msgid "number of equations required"
#~ msgstr ""

#~ msgid "infinite reservoir"
#~ msgstr ""

