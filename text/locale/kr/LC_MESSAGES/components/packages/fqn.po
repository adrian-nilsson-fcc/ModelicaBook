#
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example v0.3.6\n"
"Report-Msgid-Bugs-To: mail@modelica.co.kr\n"
"POT-Creation-Date: 2023-01-28 22:37+0000\n"
"PO-Revision-Date: 2023-03-12 22:37+0000\n"
"Last-Translator: Baek Youngjin, mail@modelica.co.kr / Ha HyeonSu, <iloveyou934671@gmail.com>\n"
"Language-Team: modelica.co.kr <mail@modelica.co.k>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"


#: ../../source/components/packages/fqn.rst:4
msgid "Referencing Package Contents"
msgstr ""
"패키지 내용 참조(Referencing Package Contents)"

#: ../../source/components/packages/fqn.rst:6
msgid ""
"Now that we've covered :ref:`organizing-content`, we'll discuss how to "
"access that content across different packages.  Let's consider the "
"following example:"
msgstr ""
"이제 :ref:`organizing-content` 을 다루었으므로 다양한 패키지에서 해당 콘텐츠에 액세스하는 방법에 대해 설명하겠습니다."
"다음 예를 살펴보겠습니다."


#: ../../source/components/packages/fqn.rst:13
msgid "As we learned in the previous section, the very first line,"
msgstr ""
"이전 섹션에서 배웠듯이 첫 번째 줄은"

#: ../../source/components/packages/fqn.rst:19
msgid ""
"tells us that the ``RLC`` model is contained within the "
"``ModelicaByExample.PackageExamples`` package.  As with the previous "
"example, we are going to make use of the Modelica ``package`` system to "
"allow us to avoid defining types directly in our model.  In this way, we "
"define the types once in one package and then we can reuse them in many "
"places simply by referencing them."
msgstr ""
"``RLC`` 모델이 ``ModelicaByExample.PackageExamples`` 패키지에 포함되어 있음을 알려줍니다."
"이전 예제와 마찬가지로 모델에서 자료형을 직접 정의하지 않도록 Modelica ``package`` 시스템을 사용할 것입니다. "
"이런 식으로 하나의 패키지에서 자료형을 한 번 정의한 다음 간단히 참조하여 여러 곳에서 재사용할 수 있습니다."

#: ../../source/components/packages/fqn.rst:26
msgid ""
"Unlike the previous example in this chapter, we don't define any types in"
" this example.  Instead, we rely on types that are defined in the "
":ref:`msl`.  The :ref:`msl` contains many useful types, models, "
"constants, *etc*.  For this example, we'll just utilize a few of them.  "
"These types can be easily recognized because they start with "
"``Modelica.`` in the name of the type."
msgstr ""
"이 장의 이전 예제와 달리 이 예제에서는 어떤 자료형도 정의하지 않는 대신, :ref:`msl` 에 정의되어 있는 자료형을 사용 해보겠습니다. :ref:`msl` 에는 많은 유용한 자료형, 모델, 상수 등이 포함되어 있습니다. "
"이 예제에서는 그 중 몇 가지만 활용하겠습니다."
"이러한 자료형은 자료형 이름에 ``Modelica.`` 로 시작하기 때문에 쉽게 알아볼 수 있습니다."

#: ../../source/components/packages/fqn.rst:33
msgid ""
"We look more closely at the :ref:`lookup-rules` later in this chapter. "
"For now, it is sufficient to say that all the types starting with "
"``Modelica.`` exist within the ``Modelica`` package.  In this case, all "
"types start with ``Modelica.SIunits``.  ``SIunits`` is a package within "
"the ``Modelica`` package.  The purpose of the ``SIunits`` package is to "
"store type definitions that conform to ISO standard quantities and units."
msgstr ""
"이 장의 뒷부분에서 :ref:`lookup-rules` 를 자세히 살펴 볼 예정이므로,"
"지금은 ``Modelica.`` 로 시작하는 모든 자료형이 ``Modelica`` 패키지 내에 존재한다고 말하는 것으로 충분합니다."
"이 경우 모든 자료형은 ``Modelica.SIunits`` 로 시작합니다. "
"``SIunits`` 은 ``Modelica`` 패키지 내의  ISO 표준 수량 및 단위를 준수하는 자료형 정의를 목적을 가진 패키지 입니다."


#: ../../source/components/packages/fqn.rst:43
msgid ""
"As can be seen in the example code, these types are referenced by their "
"\"fully qualified name\".  That means that type name starts with the name"
" of a top-level package (a package that is not contained within another "
"package).  Each ``.`` in the name represents a new child package.  The "
"last name in the sequence identifies that actual type being referenced."
msgstr ""
"예제 코드에서 볼 수 있듯이 이러한 자료형은 "정규화된 이름"으로 참조됩니다."
"즉, 자료형 이름은 최상위 패키지(다른 패키지에 포함되지 않은 패키지)의 이름으로 시작합니다. "
"이름의 각 ``.`` 는 새로운 하위 패키지를 나타내며, 시퀀스의 마지막 이름은 참조되는 실제 자료형을 식별해주게 됩니다."



#: ../../source/components/packages/fqn.rst:50
msgid ""
"In this case, we are using 5 different types from within the "
"``Modelica.SIunits`` package: ``Voltage``, ``Inductance``, "
"``Resistance``, ``Capacitance`` and ``Current``.  These types provide "
"information about the units for each of these types, limitations on the "
"values of these types (*e.g.*, a capacitance cannot be less than zero), "
"*etc*.  They are defined in the :ref:`msl` as follows:"
msgstr ""
"이 경우 ``Modelica.SIunits`` 패키지 내에서 ``Voltage``, ``Inductance``, ``Resistance``, ``Capacitance`` 및 ``Current`` 의 5가지 자료형을 사용하고 있습니다. "
"이러한 자료형은 각 자료형의 단위에 대한 정보, 자료형의 값에 대한 제한 (*예:*, 커패시턴스가 0보다 작을 수 없음) *등* 을 제공하며, "
"다음과 같이 :ref:`msl` 에 정의되어 있습니다."

#: ../../source/components/packages/fqn.rst:75
msgid ""
"Apart from providing better documentation, there is an immediate benefit "
"to associating such types with variables and that is because it enables "
"unit consistency checking of the equations.  For example, note the "
"following equation from this example:"
msgstr ""
"미리 정의된 자료형을 변수와 연결하면 문서화 하는 것에 대한 장점 뿐만 아니라 즉각적인 이점 생깁니다. "
"방정식의 단위 일관성 검사하는 것이 가능하게 하기 때문입니다."
"예를 들어, 이 예제에서 다음 방정식을 살펴 보겠습니다."


#: ../../source/components/packages/fqn.rst:84
msgid ""
"Clearly, this is a statement of Ohm's law.  But what if we made a mistake"
" and accidentally wrote:"
msgstr ""
"이것은 옴의 법칙에 대한 수식인데, 실수를 해서 다음과 같이 썼다면 어떻게 될까요?"

#: ../../source/components/packages/fqn.rst:91
msgid ""
"Syntactically speaking, this equation is perfectly legal. Furthermore, if"
" the variable ``i_R``, ``V`` and ``R`` were all declared to have the type"
" ``Real``, there would be no issue with this equation.  However, because "
"we know (from the type definitions) that these variables represent a "
"current, a voltage and a resistance, respectively, a Modelica compiler is"
" able to determine (in a completely automatic way using the definitions "
"shown previously) that the left and right hand sides of this equation are"
" inconsistent with respect to physical units.  In other words, by "
"associating a physical type with variables it is possible to detect "
"modeling errors, automatically."
msgstr ""
"이 방정식은 구문적으로 완벽하게 적법합니다. 또한 변수 ``i_R``, ``V`` 및 ``R`` 이 모두 ``Real`` 자료형으로 선언된 경우 이 방정식에 문제가 없습니다. "
"그러나 (자료형 정의에서) 이러한 변수가 각각 전류, 전압 및 저항을 나타낸다는 것을 알고 있기 때문에,"
"모델리카 컴파일러는 (이전에 표시된 정의를 사용하여 완전히 자동으로) 왼쪽과 오른쪽이 이 방정식의 물리적 단위와 관련하여 일치하지 않다는 것을 알아냅니다. "
"즉, 물리적 자료형을 변수와 연결하여 모델링 오류를 자동으로 감지할 수 있습니다. "


#~ msgid "fully qualified name"
#~ msgstr ""

