#
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example v0.3.6\n"
"Report-Msgid-Bugs-To: mail@modelica.co.kr\n"
"POT-Creation-Date: 2023-01-28 22:37+0000\n"
"PO-Revision-Date: 2023-03-12 22:37+0000\n"
"Last-Translator: Baek Youngjin, mail@modelica.co.kr / Ha HyeonSu, <iloveyou934671@gmail.com>\n"
"Language-Team: modelica.co.kr <mail@modelica.co.k>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"


#: ../../source/components/packages/lookup.rst:4
msgid "Lookup Rules"
msgstr ""
"룩업 규칙(Lookup Rules)"


#: ../../source/components/packages/lookup.rst:6
msgid ""
"Recall the following example from our discussion on :ref:`organizing-"
"content`:"
msgstr ""
":ref:`organizing-content` 에 대한 내용을 다룰 때의 다음 예제를 기억해 보겠습니다."

#: ../../source/components/packages/lookup.rst:12
msgid ""
"When we discussed :ref:`ref-pkg-contents`, the example that was presented"
" used fully qualified names for all the types it referenced. But the "
"example above doesn't.  We see, from the ``LotkaVolterra`` model that the"
" ``Wolves`` type is referenced as:"
msgstr ""
":ref:`ref-pkg-contents` 에 대해 논의할 때 제시된 예제는 참조하는 모든 자료형에 대해 정규화된 이름을 사용했습니다. 그러나 위의 예제는 그렇지 않습니다. ``LotkaVolterra`` 모델에서 ``Wolves`` 자료형이 다음과 같이 참조되는 것을 볼 수 있습니다."

#: ../../source/components/packages/lookup.rst:21
msgid "And not as:"
msgstr ""
"위에서 보인 형태는 다음과 같은, "


#: ../../source/components/packages/lookup.rst:27
msgid ""
"In other words, we didn't use the fully qualified name.  But the "
"``LotkaVolterra`` model compiles just fine.  So how is it that the "
"Modelica compiler knows which definition of ``Wolves`` to use?"
msgstr ""
"정규화된 이름을 사용하지 않았습니다. 하지만 ``LotkaVolterra`` 모델은 잘 컴파일됩니다."
"그렇다면 모델리카 컴파일러가 사용할 ``Wolves`` 정의를 어떻게 알 수 있을까요?"


#: ../../source/components/packages/lookup.rst:33
msgid ""
"The answer involves \"name lookup\" in Modelica.  Name lookup in Modelica"
" involves searching for the named definition.  Type names in Modelica are"
" generally qualified (although not necessarily **fully** qualified) "
"names.  This means they may contain a ``.`` in them, *e.g.,* "
"``Modelica.SIunits.Voltage``.  In order to locate the matching definition"
" associated with a name, the Modelica compiler starts by looking for the "
"**first** name in the qualified name, *e.g.,* ``Modelica``.  It searches "
"for a matching definition in the following order:"
msgstr ""
"답은 모델리카의 "이름 조회"와 관련이 있습니다."
"모델리카 이름 조회는 사전에 정의되어진 이름에 대한 검색이 포함됩니다. "
"모델리카 자료형의 이름은 일반적으로 정규화된 이름입니다(반드시 **완전한** 정규화된 이름은 아님). "
"즉, *예:* ``Modelica.SIunits.Voltage`` 와 같이 ``.`` 가 포함될 수 있습니다. "
"이름과 관련된 일치하는 정의를 찾기 위해 모델리카 컴파일러는 정규화된 이름에서 **첫 번째** 이름(예: * ``Modelica``)을 찾는 것으로 시작합니다."
"다음 순서로 일치하는 정의를 검색합니다.:"


#: ../../source/components/packages/lookup.rst:42
msgid "Look for a matching name among builtin types"
msgstr ""
"내장 자료형 중에서 일치하는 이름을 찾습니다."


#: ../../source/components/packages/lookup.rst:43
msgid ""
"Look in the current definition for a nested definition with a matching "
"name (include inherited definitions)"
msgstr ""
"현재 정의에서 이름이 일치하는 중첩된 정의를 찾습니다(상속된 정의 포함)"

#: ../../source/components/packages/lookup.rst:45
msgid ""
"Look in the current definition for an imported definition with a matching"
" name (do not include inherited imports)"
msgstr ""
"현재 정의에서 이름이 일치하는 가져온 정의를 찾습니다(상속된 가져오기는 포함하지 않음)"

#: ../../source/components/packages/lookup.rst:47
msgid ""
"Look in the parent package of the current definition for a nested "
"definition with a matching name (including inherited definitions)"
msgstr ""
"일치하는 이름(상속된 정의 포함)이 있는 중첩된 정의에 대한 현재 정의의 상위 패키지를 찾습니다."


#: ../../source/components/packages/lookup.rst:49
msgid ""
"Look in the parent package for an imported definition with a matching "
"name (not including inherited imports)"
msgstr ""
"부모 패키지에서 이름이 일치하는 가져온 정의를 찾습니다(상속된 가져오기 제외)"


#: ../../source/components/packages/lookup.rst:51
msgid "Look in each successive parent (using the same approach) until either:"
msgstr ""
"다음 중 하나가 될 때까지 각 연속 부모를 살펴봅니다(동일한 접근 방식 사용).:"

#: ../../source/components/packages/lookup.rst:54
msgid ""
"The parent package has the ``encapsulated`` qualifier, in which case the "
"search terminates."
msgstr ""
"상위 패키지에는 ``encapsulated`` 한정자가 있으며 이 경우 검색이 종료됩니다. "

#: ../../source/components/packages/lookup.rst:56
msgid ""
"There are no more parent packages, in which case you search for a match "
"among root level packages."
msgstr ""
"더 이상 상위 패키지가 없는 경우, 이 경우 루트 수준 패키지 까지 일치하는 항목을 검색함."

#: ../../source/components/packages/lookup.rst:59
msgid ""
"If the given name cannot be found after searching all these locations, "
"then the search fails and the type cannot be resolved.  If the search "
"succeeds, then we've located the definition of the **first name** in the "
"qualified name.  If the name is not qualified (*i.e.,* it does not have a"
" ``.`` in the name), then we are done.  However, if it does have other "
"components in the name, these must be nested definitions contained within"
" the definition returned by the search.  If nested definitions cannot be "
"found for all remaining components in a qualified name, then the search "
"fails and the type cannot be resolved."
msgstr ""
"이러한 위치를 모두 검색한 후에도 지정된 이름을 찾을 수 없으면 검색에 실패하고 자료형을 확인할 수 없습니다. "
"검색에 성공하했다는 것은 정규화된 이름에서 **그 이름** 의 정의를 찾은 것입니다. 이름이 정규화되지 않은 경우(*즉,* 이름에 ``.`` 가 없는 경우)에는 그것으로 완료된 것입니다. "
"그러나 이름에 다른 구성 요소가 있는 경우 이 구성 요소는 검색에서 반환된 정의 내에 포함된 중첩이여야 합니다."
"정규화된 이름의 나머지 모든 구성 요소에 대해 중첩된 정의를 찾을 수 없으면 검색이 실패하고 자료형을 확인할 수 없습니다."



#: ../../source/components/packages/lookup.rst:69
msgid ""
"At first, this might sound very complicated.  However, most of the time "
"these rules are not very important.  The reason is that, as we discussed "
"previously, most graphical Modelica environments will use fully qualified"
" names.  Most type names in Modelica code will either reference local "
"definitions or will be specified with fully qualified names."
msgstr ""
"처음에는 이것이 매우 복잡하게 들릴 수 있는데, 대부분의 경우 이러한 규칙은 그다지 중요하지 않습니다. "
"그 이유는 앞에서 설명한 것처럼 그래픽 모델리카 환경에서 대부분이 정규화된 이름을 사용하기 때문입니다."
"모델리카 코드의 자료형 이름은 로컬 정의를 참조하거나 정규화된 이름으로 지정됩니다."

msgid "Duplicate Names"
msgstr ""
"중복 이름(Duplicate Names)"

#: ../../source/components/packages/lookup.rst:78
msgid ""
"You should always avoid having nested packages with the same name as a "
"top-level package.  The reason this is a problem is that the lookup rules"
" search up through the package hierarchy.  As a result, they will find "
"the nested definition before the root level one.  This means that lookup "
"of fully qualified names (ones that are referenced relative to the root "
"of the package tree) will fail because they will find the nested "
"definition first."
msgstr ""
"최상위 패키지와 이름이 같은 중첩 패키지는 항상 피해야 하는데, 왜냐하면 패키지 계층 구조를 통해 조회 규칙을 검색하기 때문입니다. "
"결과적으로 루트 수준 정의보다 먼저 (이름이 같은) 중첩된 정의를 먼저 찾게 되고, 정규화된 이름(패키지 트리의 루트에 대해 참조되는 이름)의 조회는 실패합니다."


#~ msgid "encapsulated"
#~ msgstr ""

