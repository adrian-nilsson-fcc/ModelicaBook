#
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example v0.3.6\n"
"Report-Msgid-Bugs-To: mail@modelica.co.kr\n"
"POT-Creation-Date: 2023-01-28 22:37+0000\n"
"PO-Revision-Date: 2023-03-12 22:37+0000\n"
"Last-Translator: Baek Youngjin, mail@modelica.co.kr / Ha HyeonSu, <iloveyou934671@gmail.com>\n"
"Language-Team: modelica.co.kr <mail@modelica.co.k>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"


#: ../../source/components/packages/importing.rst:4
msgid "Importing"
msgstr ""
"가져오기(Importing)"

#: ../../source/components/packages/importing.rst:8
msgid ""
"As we saw previously, there are basically three forms of importing. In "
"all cases, the ``import`` statement creates an \"alias\" within the "
"definition that refers to a name defined elsewhere."
msgstr ""
"이전에 살펴본 것처럼 기본적으로 가져오기에는 세 가지 형식이 있는데, 다른 곳에서 정의된 이름을 참조하는 모든 정의에 대해 ``import`` 문은 "별칭(alias)"을 만듭니다."



#: ../../source/components/packages/importing.rst:12
msgid ""
"The first form simply imports a definition by its fully qualified name, "
"e.g.:"
msgstr ""
"첫 번째 형식은 다음과 같이 정규화된 이름으로 정의를 가져오는 경우 입니다."


#: ../../source/components/packages/importing.rst:19
msgid ""
"The result of such an import is that references to the name "
"``Temperature`` are mapped to the fully qualified name "
"``Modelica.SIunits.Temperature``.  In other words, the alias introduced "
"by the ``import`` statement is ``Temperature`` and it maps to the "
"definition found at ``Modelica.SIunits.Temperature``.  With this form of "
"import, the name of the alias always matches the last element in the name"
" of what is being imported (*e.g.,* ``Temperature``)."
msgstr ""
"이러한 가져오기의 결과는 ``Temperature`` 이름에 대한 참조가 정규화된 이름 ``Modelica.SIunits.Temperature`` 로 매핑됩니다. "
"즉, ``import`` 문에 의해 도입된 별칭은 ``Temperature`` 이며 ``Modelica.SIunits.Temperature`` 에 있는 정의에 매핑됩니다. "
"이 형식의 가져오기를 사용하면 별칭의 이름은 항상 가져올 이름의 마지막 요소와 일치합니다(*예:* ``Temperature``)."



#: ../../source/components/packages/importing.rst:28
msgid ""
"In some cases, we want the alias that is introduced to be different from "
"the last element of the imported name.  In this case, we can explicitly "
"introduce an alternative name for the alias, *e.g.,*"
msgstr ""
"도입된 별칭이 가져온 이름의 마지막 요소와 다르기를 원하는 경우가 있는데, 이 경우 별칭에 대한 대체 이름을 명시적으로 도입할 수 있습니다. "
"*예를 들면* 아래와 같습니다."

#: ../../source/components/packages/importing.rst:36
msgid ""
"After such an import, we can use the alias ``DegK`` to refer to "
"``Modelica.SIunits.Temperature``.  Providing alternative names avoids "
"name collisions or simply makes the model more readable."
msgstr ""
"이러한 가져오기 후에는 ``DegK`` 별칭을 사용하여 ``Modelica.SIunits.Temperature`` 를 참조할 수 있습니다. "
"대체 이름을 제공하면 이름 충돌을 피하거나 단순히 모델을 더 읽기 쉽게 만들 수 있습니다."


#: ../../source/components/packages/importing.rst:40
msgid ""
"Finally, it is possible to import all definitions within a package into "
"the current scope.  This is done with a wildcard import.  For example, to"
" import all the definitions in the ``Modelica.SIunits`` package, we would"
" use the following ``import`` statement:"
msgstr ""
"마지막으로 패키지 내의 모든 정의를 현재 범위로 가져올 수 있는데, 이것은 와일드카드 가져오기로 수행할 수 있습니다."
"예를 들어 ``Modelica.SIunits`` 패키지의 모든 정의를 가져오려면 다음 ``import`` 문을 사용합니다."


#: ../../source/components/packages/importing.rst:49
msgid ""
"Such an import would create as many aliases as there are definitions in "
"``Modelica.SIunits``.  The only option available is for each alias to be "
"named the same as the definition in the imported package (*i.e.,* it "
"isn't possible to assign an alternative name for the alias)."
msgstr ""
"이러한 가져오기는 ``Modelica.SIunits`` 에 있는 정의만큼 많은 별칭을 생성합니다."
"사용 가능한 유일한 옵션은 가져온 패키지의 정의와 동일한 이름을 각 별칭에 지정하는 것입니다(*즉,* 별칭에 대한 대체 이름을 할당할 수 없음)."


msgid "Wildcards considered harmful"
msgstr ""
"유해한 것으로 간주되는 와일드카드(Wildcards considered harmful)"

#: ../../source/components/packages/importing.rst:59
msgid ""
"These types of wildcard imports are dangerous because, as mentioned, "
"there is no option to rename a type.  As a consequence, two or more "
"wildcard imports in the same model could create name clashes.  "
"Furthermore, explicit imports (or fully qualified types) make it very "
"easy to backtrack and locate the definition associated with a given type."
"  Wildcards make this very difficult because it is not clear what types "
"are imported from what packages."
msgstr ""
"이러한 자료형의 와일드카드 가져오기는 언급한 바와 같이 자료형 이름을 바꿀 수 있는 옵션이 없기 때문에 위험합니다. "
"결과적으로 동일한 모델에서 두 개 이상의 와일드카드 가져오기가 이름 충돌을 일으킬 수 있습니다. "
"또한 명시적 가져오기(또는 정규화된 자료형)를 사용하면 지정된 자료형과 관련된 정의를 쉽게 역추적하고 찾을 수 있습니다. "
"와일드카드는 어떤 패키지에서 어떤 자료형을 가져왔는지 명확하지 않기 때문에 이를 매우 어렵게 만듭니다."


#: ../../source/components/packages/importing.rst:69
msgid ""
"If you want to import multiple entries from the same package you can use "
"a special syntax."
msgstr ""
"동일한 패키지에서 여러 항목을 가져오려는 경우 특수 구문을 사용할 수 있습니다."

#: ../../source/components/packages/importing.rst:75
msgid ""
"This avoids the repetition of multiple imports while avoiding the "
"problems of wildcards. Note that this feature was introduced in Modelica "
"Language Specification Version 3.3."
msgstr ""
"바로 위에 있는 예제는 와일드카드 문제를 피하면서 여러가지를 가져올 때 발생하는 반복 구문을 피합니다. "
"이 기능은 모델리카 언어 사양 버전 3.3에서 도입되었습니다."


#~ msgid ""
#~ "As we saw previously, there are "
#~ "basically three forms of importing. In"
#~ " all cases, the ``import`` statement "
#~ "creates an \"alias\" within the "
#~ "definition that refers to a type "
#~ "defined elsewhere."
#~ msgstr ""

