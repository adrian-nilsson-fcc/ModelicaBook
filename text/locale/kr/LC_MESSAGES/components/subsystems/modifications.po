#
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example v0.3.6\n"
"Report-Msgid-Bugs-To: mail@modelica.co.kr\n"
"POT-Creation-Date: 2023-01-28 22:37+0000\n"
"PO-Revision-Date: 2023-03-12 22:37+0000\n"
"Last-Translator: Baek Youngjin, mail@modelica.co.kr / Ha HyeonSu, <iloveyou934671@gmail.com>\n"
"Language-Team: modelica.co.kr <mail@modelica.co.k>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"


#: ../../source/components/subsystems/modifications.rst:4
msgid "Modifications"
msgstr ""
"수정(Modifications)"

#: ../../source/components/subsystems/modifications.rst:6
msgid ""
"Previously, we've seen examples of modifications applied to variables.  "
"In some cases, these modifications are applied to :ref:`attributes` of "
"built-in types, *e.g.,*"
msgstr ""
"이전에는 변수에 적용된 수정의 예를 보았으며, 경우에 따라 이러한 :ref:`attributes` 사항은 내장 자료형의 속성에도 적용됩니다. "
"*예* 를 들어서 아래와 같은 경우를 보겠습니다."


#: ../../source/components/subsystems/modifications.rst:14
msgid ""
"In other cases, they have been applied to ``model`` instances to change "
"the values of parameters for that particular instance, *e.g.,*"
msgstr ""
"다른 경우에는 특정 인스턴스에 대한 파라미터 값을 변경하기 위해 ``model`` 인스턴스에 적용했습니다. "

#: ../../source/components/subsystems/modifications.rst:21
msgid ""
"But it is also worth pointing out that such modifications can reach down "
"deeper into the hierarchy than simply one level.  For example, consider "
"the previous example involving a ``StepVoltage`` component. We could also"
" have made a modification to the ``min`` attribute associated with the "
"``Vf`` parameter in the ``Vs`` instance of the ``StepVoltage`` model as "
"follows:"
msgstr ""
"그러나 그러한 수정이 단순히 한 수준보다 더 깊은 계층 구조에 도달할 수 있다는 점도 지적할 가치가 있습니다."
"예를 들어 ``StepVoltage`` 구성 요소와 관련된 이전 예제를 다루어 보겠습니다."
"다음과 같이 ``StepVoltage`` 모델의 ``Vs`` 인스턴스에 있는 ``Vf`` 파라미터와 관련된 ``min`` 속성을 수정할 수도 있습니다."


#: ../../source/components/subsystems/modifications.rst:32
msgid ""
"But what if we wanted to change an attribute of the ``Vf`` parameter "
"**and** give it a value?  The syntax for such a modification is:"
msgstr ""
"하지만 ``Vf`` 파라미터의 속성을 **변경하고** 값을 주고 싶다면 어떻게 해야 할까요?"
"이러한 수정 구문은 다음과 같습니다."


#: ../../source/components/subsystems/modifications.rst:39
msgid ""
"An important case worth discussion, with regards to modifications, is how"
" modifications are performed on **arrays** of components.  Imagine we had"
" an array of ``StepVoltage`` components declared as follows:"
msgstr ""
"수정과 관련하여 논의할 가치가 있는 중요한 경우는 구성 요소의 **배열** 에서 수정이 수행되는 방식입니다. "
"다음과 같이 선언된 ``StepVoltage`` 구성 요소의 배열이 있다고 상상해 보십시오."


#: ../../source/components/subsystems/modifications.rst:47
msgid ""
"As we saw in our discussion of :ref:`arrays-of-components`, this is not "
"only legal Modelica, but it can be useful to represent a collection of "
"components within a subsystem.  If we want to give the parameter ``Vf`` a"
" value, we have two choices.  The first is to specify an array of values,"
" *e.g.,*"
msgstr ""
":ref:`arrays-of-components` 에서 보았듯이 이것은 합법적인 모델리카일 뿐만 아니라 하위 시스템 내의 구성 요소 모음을 나타내는 데 유용할 수 있습니다."
"파라미터 ``Vf`` 에 값을 주고 싶다면 두 가지 선택이 있습니다. "
'첫 번째는 값의 배열을 지정하는 것입니다. "
"*예* 를 들면 아래와 같습니다."
 
#: ../../source/components/subsystems/modifications.rst:57
msgid ""
"This assigns the values in the vector ``{24,26,28,30,32}`` to "
"``Vs[1].Vf``, ``Vs[2].Vf``, ``Vs[3].Vf``, ``Vs[4].Vf`` and ``Vs[5].Vf``, "
"respectively.  The other choice we have is to give the same value to "
"every element in the array.  We could use this same array initialization "
"syntax, *e.g.,*"
msgstr ""
"이것은 ``{24,26,28,30,32}`` 벡터의 값을 ``Vs[1].Vf``, ``Vs[2].Vf``, ``Vs[3].Vf``, ``Vs[4].Vf`` 및 ``Vs[5].Vf`` 에 할당합니다. "
"또 다른 방법은 배열의 모든 요소에 동일한 값을 제공하는 것입니다. "
"이와 동일한 배열 초기화 구문을 사용할 수 있습니다. "
"*예* 를 들면 아래와 같습니다."


#: ../../source/components/subsystems/modifications.rst:67
msgid ""
"The problem comes when the number of elements in an array is defined by a"
" ``parameter``, *e.g.,*"
msgstr ""
"배열의 요소 수가 ``parameter`` 로 정의될 때 문제가 발생합니다. "

#: ../../source/components/subsystems/modifications.rst:75
msgid ""
"If we tried to initialize ``Vf`` with a literal array (*e.g.,* "
"``{24,24,24}``), then it won't adapt to changes in ``n``.  To address "
"this situation, we could use the :ref:`fill-function` function:"
msgstr ""
"리터럴 배열(*예:* ``{24,24,24}``)로 ``Vf`` 를 초기화하려고 하면 ``n`` 의 변경 사항에 적응하지 않습니다. "
"이 상황을 해결하기 위해 :ref:`fill-function` 함수를 사용할 수 있습니다."


#: ../../source/components/subsystems/modifications.rst:84
msgid ""
"This is an acceptable solution.  But imagine if we wanted to modify both "
"the value of ``Vf`` and the ``min`` attribute inside ``Vf``? We'd end up "
"with something like this:"
msgstr ""
"이것은 수용 가능한 해입니다."
"그러나, ``Vf`` 의 값과 ``Vf`` 내부의 ``min`` 속성을 모두 수정하고 싶다고 상상해 보십시오."
"그런경우,  다음과 같이 끝낼 수 있습니다."


#: ../../source/components/subsystems/modifications.rst:93
msgid ""
"With nested modifications, this kind of thing can get complicated "
"quickly.  Fortunately, Modelica includes a feature to deal with such "
"situations.  By placing the ``each`` keyword in front of a modification, "
"that modification is applied to every instance, *e.g.,*"
msgstr ""
"중첩 수정을 사용하면 이런 종류의 작업이 매우 복잡해질 수 있습니다. "
"다행스럽게도 모델리카에는 이러한 상황을 처리하는 기능이 포함되어 있습니다."
"수정 앞에 ``each`` 키워드를 배치하면 해당 수정이 모든 인스턴스에 적용됩니다. "


#: ../../source/components/subsystems/modifications.rst:103
msgid ""
"Modifications are an essential part of modeling because they allow us to "
"modify the parameter values down through the hierarchy.  As you can see "
"from the examples in this section, Modelica provides many features to "
"make applying modifications to hierarchies simple and powerful."
msgstr ""
"수정은 계층 구조를 통해 파라미터 값을 수정할 수 있기 때문에 모델링의 필수 부분이라고 볼 수 있습니다. "
"이 섹션의 예제에서 볼 수 있듯이 모델리카는 계층 구조에 대한 수정 사항을 간단하고 강력하게 적용할 수 있는 많은 기능을 제공합니다."


#~ msgid ""
#~ "If we tried to initialize ``Vf`` "
#~ "with a literal array (*e.g.,* "
#~ "``{24,24,24}``, then it won't adapt to"
#~ " changes in ``n``.  To address this"
#~ " situation, we could use the :ref"
#~ ":`fill-function` function:"
#~ msgstr ""

