#
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example v0.3.6\n"
"Report-Msgid-Bugs-To: mail@modelica.co.kr\n"
"POT-Creation-Date: 2023-01-28 22:37+0000\n"
"PO-Revision-Date: 2023-03-12 22:37+0000\n"
"Last-Translator: Baek Youngjin, mail@modelica.co.kr / Ha HyeonSu, <iloveyou934671@gmail.com>\n"
"Language-Team: modelica.co.kr <mail@modelica.co.k>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"


#: ../../source/components/subsystems/comp_arrays.rst:4
msgid "Arrays of Component"
msgstr ""
"구성요소의 배열(Arrays of Component)"

#: ../../source/components/subsystems/comp_arrays.rst:8
msgid ""
"Several of the examples in this chapter used arrays of components. Arrays"
" of components are useful when the user might want to \"scale\" the "
"number of components used using a parameter (as we saw in our discussions"
" of both :ref:`distributed-heat-transfer` and :ref:`harmonic-motion`)."
msgstr ""
"이 장의 여러 예제에서는 구성 요소 배열을 사용했습니다."
":ref:`distributed-heat-transfer` 및 :ref:`harmonic-motion` 둘 다에서 다루 었던것 처럼,"
"구성요소 배열은 사용자가 파라미터를 사용하여 구성요소의 수를 "스케일링"하려는 경우에 유용합니다"



#: ../../source/components/subsystems/comp_arrays.rst:14
msgid ""
"Creating an array of components is really no different from creating an "
"array of scalar variables like we did in our previous discussion on :ref"
":`vectors-and-arrays`.  As we can see in this example,"
msgstr ""
"구성 요소 배열을 만드는 것은 벡터 및 배열에 대한 이전 논의에서 했던 것처럼, 스칼라 변수 배열을 만드는 것과 실제로 다르지 않습니다."
"아래의 예제에서 볼 수 있습니다."


#: ../../source/components/subsystems/comp_arrays.rst:22
msgid ""
"the syntax for creating an array of components is identical to the syntax"
" used for other types.  All that is required is to follow the name of the"
" variable being declared by a set of dimensions."
msgstr ""
"구성 요소 배열을 만드는 구문은 다른 자료형에 사용하는 구문과 동일합니다. "
"여기서 필요한 것은 일련의 차원에 의해 선언하는 변수의 이름을 따르는 것입니다."

#: ../../source/components/subsystems/comp_arrays.rst:26
msgid ""
"However, unlike scalars, components have other declarations inside them."
"  So whenever an array of components is created, the structure of that "
"component is replicated for each component in the array. Modelica imposes"
" a restriction that in every array, every element must be the same type."
"  This may seem obvious, but that is partly because we haven't discussed "
"``replaceable`` components yet.  We'll learn more about ``replaceable`` "
"components in the next chapter when we talk about Modelica's :ref"
":`configuration-management` features.  But for now we will simply point "
"out that it is not possible to ``redeclare`` only one element in an "
"array."
msgstr ""
"그러나, 스칼라와 달리 구성 요소에는 내부에 기존과 다른 선언이 있습니다."
"따라서 구성 요소 배열이 생성될 때마다 해당 구성 요소의 구조가 배열의 각 구성 요소에 대해 복제됩니다. "
"모델리카는 모든 배열에서 모든 요소가 동일한 자료형이어야 한다는 제한을 부과하는데, 이것은 뻔하고 당연한 일인 것 처럼 보입니다. "
"왜냐하면 아직 ``교체 가능한`` 구성 요소에 대해 논의하지 않았기 때문입니다."
"모델리카의 :ref:`configuration-management` 기능에 대해 이야기할 때 다음 장에서 ``교체 가능한`` 구성 요소에 대해 자세히 알아볼 것입니다."
"그러나 지금은 배열에서 단 하나의 요소만 ``재선언`` 하는 것이 불가능하다는 점에 대해서 언급하겠습니다."


#: ../../source/components/subsystems/comp_arrays.rst:39
msgid ""
"As we touched on briefly in our discussion of :ref:`harmonic-motion`, "
"when we make :ref:`sub-modifications` to arrays of components, each "
"variable inside the component is implicitly treated as an array.  For "
"example, consider the following ``record`` definition:"
msgstr ""
":ref:`harmonic-motion` 에 대한 논의에서 간략하게 언급했듯이 구성 요소 배열에 하위 수정을 만들 때 구성 요소 내부의 각 변수는 암시적으로 배열로 처리됩니다."
"예를 들어, 다음 ``record`` 정의를 보겠습니다."


#: ../../source/components/subsystems/comp_arrays.rst:52
msgid ""
"If we were to declare an array of ``Point`` components, *e.g.,* ``Point "
"p[5]``, any reference to ``p.x`` is treated as an array of 5 ``Real`` "
"variables, *i.e.,* ``p[1].x``, ``p[2].x``, ``p[3].x``, ``p[4].x`` and "
"``p[5].x``.  This is called *slicing*.  The bottom line is that if we "
"leave off a subscript (*e.g.,* ``p.x``), it gets \"pushed to the end\" "
"(or more technically, it is left \"unbound\" and can be \"bound\" later)."
"  Also, if a subscript is supplied as a range (*e.g.,* ``:``, ``1:end``, "
"``2:3``), then the expression resolves to a subset of the array "
"corresponding to the indices in the range.  All of this holds even for "
"arrays of components containing arrays of components and so on."
msgstr ""
"``Point`` 구성 요소의 배열을 선언하는 경우를 예로 들면, ``Point p[5]``, ``p.x`` 에 대한 모든 참조는 5개의 ``real`` 변수 배열로 처리됩니다."
"*즉,* ``p[1].x``, ``p[2].x``, ``p[3].x``, ``p[4]. x`` 및 ``p[5].x`` 입니다. 이것을 *슬라이싱* 이라고 합니다. "
"결론은 아래 첨자(*e.g.,* ``p.x``)를 생략하면 "끝까지 밀려난다"는 것입니다(또는 더 기술적으로는 "언바운드"로 남겨두고 나중에 "바운드"될 수 있음)."
"또한 아래 첨자가 범위(*예:* ``:``, ``1:end``, ``2:3``)로 제공되면 식은 범위의 인덱스에 해당하는 배열의 하위 집합으로 해석합니다."
"이 모든 것은 구성 요소 배열 등을 포함하는 구성 요소 배열에도 적용됩니다."



#: ../../source/components/subsystems/comp_arrays.rst:64
msgid "The following example, demonstrates some of the more common cases:"
msgstr ""
"다음 예제는 보다 일반적인 경우의 일부를 보여줍니다."

#~ msgid "arrays"
#~ msgstr ""

#~ msgid "of components"
#~ msgstr ""

#~ msgid "slicing"
#~ msgstr ""

