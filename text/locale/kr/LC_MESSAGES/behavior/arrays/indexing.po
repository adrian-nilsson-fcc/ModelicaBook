#
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example v0.3.6\n"
"Report-Msgid-Bugs-To: mail@modelica.co.kr\n"
"POT-Creation-Date: 2023-01-28 22:37+0000\n"
"PO-Revision-Date: 2023-03-12 22:37+0000\n"
"Last-Translator: Baek Youngjin, mail@modelica.co.kr / Ha HyeonSu, <iloveyou934671@gmail.com>\n"
"Language-Team: modelica.co.kr <mail@modelica.co.k>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"


#: ../../source/behavior/arrays/indexing.rst:4
msgid "Array Indexing"
msgstr ""
"배열 인덱싱(Array Indexing)"

#: ../../source/behavior/arrays/indexing.rst:6
msgid ""
"We've seen many examples in this chapter showing how arrays are indexed."
"  So it might not seem necessary to have a section devoted to discussing "
"how to index arrays.  It is true that normally you would simply reference"
" elements in an array using integer values for each subscript.  But there"
" are enough other ways to index arrays that it is worth spending some "
"time to talk about them."
msgstr ""
"이 장에서 배열이 인덱싱되는 방법을 보여주는 많은 예제를 보았기 때문에, 배열을 인덱싱하는 방법을 논의하는 별도의 섹션이 필요하지 않은 것 같습니다."
"일반적으로 각 첨자에 대해 정수 값을 사용하여 배열의 요소를 참조하는 것은 흔하지만,  "
"어레이를 인덱싱하는 다른 방법이 충분히 있으므로 이에 대해 이야기하는 데 시간을 할애할 가치가 있다고 생각합니다.


#: ../../source/behavior/arrays/indexing.rst:14
msgid "Indices"
msgstr ""
"지수(Indices)"

#: ../../source/behavior/arrays/indexing.rst:17
msgid "Integers"
msgstr ""
"정수(Integers)"

msgid "1-index"
msgstr ""

#: ../../source/behavior/arrays/indexing.rst:21
msgid ""
"For array dimensions specified using integers, Modelica uses indices "
"starting with **1**.  Some languages choose to use zero as the starting "
"index, but it is important to point out from the start that Modelica "
"follows the 1-index convention."
msgstr ""
"정수를 사용하여 지정된 배열 차원의 경우 모델리카는 **1** 으로 시작하는 인덱스를 사용합니다."
"일부 언어에서는 0을 시작 인덱스로 사용하기로 선택하지만 처음부터 모델리카가 1-인덱스 규칙을 따른다는 점을 기억하는 것이 중요합니다."


#: ../../source/behavior/arrays/indexing.rst:26
msgid ""
"Obviously, the most directly way to index an array is to use an integer."
"  For an array declared as:"
msgstr ""
"분명히 배열을 인덱싱하는 가장 직접적인 방법은 정수를 사용하는 것입니다. "
"다음과 같이 선언된 배열의 경우"


#: ../../source/behavior/arrays/indexing.rst:33
msgid ""
"we can index elements of the array by providing an integer between 1 and "
"5 for the first subscript and 1 and 4 for the second subscript."
msgstr ""
"첫 번째 첨자에 1에서 5 사이의 정수를 사용하고 두 번째 첨자에 1에서 4 사이의 정수를 사용하여 배열의 요소를 인덱싱할 수 있습니다."

#: ../../source/behavior/arrays/indexing.rst:36
msgid ""
"But it is worth pointing out that Modelica allows the subscripts to be "
"vectors.  To understand how vector indices work, first consider the "
"following matrix:"
msgstr ""
"여기에서 모델리카는 첨자가 벡터가 되도록 허용한다는 점을 기억할 필요가 있습니다."
"벡터 인덱스의 작동 방식을 이해하기위해 먼저 다음 행렬을 살펴 보겠습니다."


#: ../../source/behavior/arrays/indexing.rst:40
msgid ""
"B = \\left[ \\begin{array}{ccc} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\\\ 7 & 8 & 9 "
"\\end{array} \\right]"
msgstr ""

#: ../../source/behavior/arrays/indexing.rst:50
msgid "In Modelica, such an array would be declared as follows:"
msgstr ""
"모델리카에서 이러한 배열은 다음과 같이 선언됩니다."

#: ../../source/behavior/arrays/indexing.rst:56
msgid "Imagine we wish to extract a submatrix of ``B`` as follows:"
msgstr ""
"다음과 같이 ``B`` 의 부분행렬을 추출한다고 생각해 보겠습니다."

#: ../../source/behavior/arrays/indexing.rst:62
msgid ""
"We could extract the same submatrix more easily using vector subscripts "
"as follows:"
msgstr ""
"다음과 같이 벡터 첨자를 사용하여 동일한 부분 행렬을 더 쉽게 추출할 수 있습니다."

#: ../../source/behavior/arrays/indexing.rst:69
msgid ""
"By using vector subscripts we can extract or construct arbitrary sub-"
"arrays.  This is where :ref:`range-notation` can be very useful. The same"
" submatrix extraction could also be represented as:"
msgstr ""
"위에서 보여준 것 처럼 벡터 첨자를 사용하여 임의의 하위 배열을 추출하거나 구성할 수 있습니다."
"여기에서는 :ref:`range-notation` 이 매우 유용할 수 있습니다. "
"동일한 부분행렬 추출은 다음과 같이 나타낼 수도 있습니다."


#: ../../source/behavior/arrays/indexing.rst:78
msgid "Enumerations"
msgstr ""
"열거형(Enumerations)"

#: ../../source/behavior/arrays/indexing.rst:80
msgid ""
"In our :ref:`chemical-system` examples, we saw how enumerations can be "
"used to specify array dimensions.  Furthermore, we saw how the values "
"specified by an ``enumeration`` type can be used to index the array. In "
"general, for an ``enumeration`` like the following:"
msgstr ""
":ref:`chemical-system` 예제에서 열거형을 사용하여 배열 크기를 지정하는 방법과 ``enumeration`` 자료형으로 지정된 값을 사용하여 배열을 인덱싱하는 방법을 살펴보았습니다. "
"일반적으로 다음과 같은 ``enumeration`` 의 경우"


#: ../../source/behavior/arrays/indexing.rst:89
msgid ""
"and then declare an array where that ``enumeration`` is used to specify a"
" dimension, *e.g.,*"
msgstr ""
"그런 다음 ``enumeration`` 이 차원을 지정하는 데 사용하는 배열을 선언합니다."

#: ../../source/behavior/arrays/indexing.rst:96
msgid ""
"then we can use the enumeration values, ``Species.A``, ``Species.B`` and "
"``Species.X`` as indices.  For example,"
msgstr ""
"그러면 열거형 값인 ``Species.A`` , ``Species.B`` 및 ``Species.X`` 를 인덱스로 사용할 수 있습니다. "
"예를 들어 다음과 같습니다."


#: ../../source/behavior/arrays/indexing.rst:106
msgid "Booleans"
msgstr ""
"불리언(Booleans)"

#: ../../source/behavior/arrays/indexing.rst:108
msgid ""
"We can use the ``Boolean`` type in much the same way as an "
"``enumeration``.  Given an array declared with ``Boolean`` for a "
"dimension:"
msgstr ""
"``열거형`` 과 거의 같은 방식으로 ``Boolean`` 자료형을 사용할 수 있는데, 차원에 대해 ``Boolean`` 으로 선언된 배열이 주어지면 아래와 같이 표현할 수 있습니다."

#: ../../source/behavior/arrays/indexing.rst:116
msgid "We can then use boolean values to index that dimension, *e.g.,*"
msgstr ""
"그런 다음 부울 값을 사용하여 해당 차원을 인덱싱할 수 있습니다. "
"*예* 를들어 아래와 같이할 수 있습니다."


#: ../../source/behavior/arrays/indexing.rst:125
msgid "``end``"
msgstr ""
"끝(``end``)"

#: ../../source/behavior/arrays/indexing.rst:127
msgid ""
"When specifying a subscript for an array, it is legal to use ``end`` in "
"the subscript expression.  In this context, ``end`` will take on the "
"value of the highest possible value for the corresponding array "
"dimension.  The use of ``end`` within expressions allows easy reference "
"to array elements with respect to the last element rather than the first."
"  For example, to reference the second from the last element in a vector,"
" the expression ``end-1`` can be used a subscript."
msgstr ""
"배열에 대한 첨자를 지정할 때 첨자 식에 ``end`` 를 사용하는 것이 허용되어 있습니다. "
"이 컨텍스트에서 ``end`` 는 해당 배열 차원에 대해 가능한 가장 높은 값을 취합니다. "
"표현식 내에서 ``end`` 를 사용하면 첫 번째 부터 요소를 지정하는 것이 아닌, 마지막 요소와 관련하여 배열 요소를 쉽게 참조할 수 있습니다."
"예를 들어 벡터의 끝에서 두 번째 요소를 참조하려면 ``end-1``  표현식을 아래 첨자로 사용할 수 있습니다."

#: ../../source/behavior/arrays/indexing.rst:135
msgid ""
"Remember that ``end`` takes on the value of the highest possible index "
"for the **corresponding array dimension**.  So for the following array:"
msgstr ""
"``end`` 는 **해당 배열 차원** 에 대해 가능한 가장 높은 인덱스 값을 취한다는 점을 기억하세요."
"따라서 다음 배열의 경우:"


#: ../../source/behavior/arrays/indexing.rst:143
msgid "The following expressions would evaluate as follows:"
msgstr ""
"왼쪽 표현식은 오른쪽 주석과 같이 해석합니다."

#: ../../source/behavior/arrays/indexing.rst:153
msgid "Slicing"
msgstr ""

#: ../../source/behavior/arrays/indexing.rst:155
msgid ""
"There is another sophisticated way of indexing arrays in Modelica. But it"
" doesn't make sense to talk about it just yet.  We will see it later when"
" we start our discussion of :ref:`arrays-of-components`."
msgstr ""
"모델리카에는 배열을 인덱싱하는 또 다른 정교한 방법이 있습니다. "
"그러나 아직 그것에 대해 지금 논의하는 것보다는 :ref:`arrays-of-components` 에 대한 논의를 시작할 때 나중에 살펴 보는 것이 좋겠습니다. "


