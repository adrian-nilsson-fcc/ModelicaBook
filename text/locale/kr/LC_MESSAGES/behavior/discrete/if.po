#
msgid ""
msgstr ""
"Project-Id-Version: Modelica by Example v0.3.6\n"
"Report-Msgid-Bugs-To: mail@modelica.co.kr\n"
"POT-Creation-Date: 2023-01-28 22:37+0000\n"
"PO-Revision-Date: 2023-03-12 22:37+0000\n"
"Last-Translator: Baek Youngjin, mail@modelica.co.kr / Ha HyeonSu, <iloveyou934671@gmail.com>\n"
"Language-Team: modelica.co.kr <mail@modelica.co.k>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"


#: ../../source/behavior/discrete/if.rst:4
msgid "If"
msgstr ""
"If 조건문"

#: ../../source/behavior/discrete/if.rst:8
msgid ""
"Although it is pretty intuitive, it is worth having a short review of the"
" syntax for ``if`` statements and ``if`` expressions.  Let's start with "
"``if`` expressions because they are the simplest to explain.  An ``if`` "
"expression has the form:"
msgstr ""
"매우 직관적인 내용이지만 ``if`` 문과 ``if`` 표현식에 대한 구문을 간략하게 검토할 필요가 있습니다."
"설명하기 가장 간단한 ``if`` 표현식부터 살펴 보겠습니다. "
"``if`` 표현식의 형식은 다음과 같습니다."


#: ../../source/behavior/discrete/if.rst:17
msgid ""
"where ``cexpr`` is a conditional expression (that will evaluate to a "
"``Boolean`` value), ``expr1`` is the value the expression will have if "
"``cexpr`` evaluates to ``true`` and ``expr2`` is the value the expression"
" will have if ``cexpr`` evaluates to ``false``."
msgstr ""
"여기서 ``cexpr`` 은 조건식(``Boolean`` 값으로 판단함)이고 ``expr1`` 은 ``cexpr`` 이 ``true`` 로 판단되는 경우에 표현식이 가질 값을 의미 합니다.  "
"``expr2`` 는 ``cexpr`` 이 ``false`` 로 판단되는 경우 표현식이 가질 값입니다."



#: ../../source/behavior/discrete/if.rst:22
msgid "An ``if`` statement has the general syntax:"
msgstr ""
"``if`` 문에는 다음과 같은 일반적인 구문이 있습니다."

#: ../../source/behavior/discrete/if.rst:38
msgid ""
"It is important to note that when an ``if`` statement appears in an "
"``equation`` section, the number of equations must be the same regardless"
" of which branch through the ``if`` statement is taken (this applies in "
"the presence of ``elseif`` as well).  One exception is the use of ``if`` "
"within an ``initial equation`` or ``initial algorithm`` section where an "
"``else`` clause is not required since the number of equations doesn't "
"have to be same for both branches.  Another notable exception is the use "
"of ``if`` within :ref:`functions` where, again, there is not requirement "
"that the number of equations be the same across both branches."
msgstr ""
"``if`` 문이 ``수식`` 섹션에 나타날 때 ``if`` 문을 통해 어떤 분기가 있든 관계없이 방정식의 수는 동일해야 한다는 점을 반드시 유의해야 합니다."
"(이것은 ``elseif`` 가 있는 경우에도 적용됩니다). "
"다만, 첫번째 예외는 방정식의 수가 같을 필요가 없기 때문에 ``else`` 절이 필요하지 않은 ``initial equation`` 또는 "
"``initial algorithm`` 섹션 내에서 ``if`` 를 사용하는 경우입니다."
"또 다른 주목할 만한 예외는 :ref:`함수 <functions>` 내에서 ``if`` 를 사용하는 경우 인데, 여기서도 방정식의 수가 두 분기에서 동일할 필요는 없습니다."



#: ../../source/behavior/discrete/if.rst:49
msgid ""
"A special case here is when you have an ``if`` statement that looks like "
"this:"
msgstr ""
"특별한 경우를 살펴보면, 다음과 같은 ``if`` 문이 있는 경우입니다."

#: ../../source/behavior/discrete/if.rst:59
msgid ""
"We can see that in both branches, a value is assigned to ``x``.  As such,"
" an equivalent way to write this using an ``if`` expression would be:"
msgstr ""
"두 경우 모두 ``x`` 에 값이 할당된 것을 볼 수 있는데, 이와 같이 ``if`` 표현식을 사용하여 위와 같은 수식을 작성하는 방법은 다음과 같습니다."

#: ../../source/behavior/discrete/if.rst:66
msgid ""
"The advantage of the second formulation is that it may make it easier for"
" a tool to optimize the code generation in the case of an ``if`` "
"expression."
msgstr ""
"시뮬레이션 소프트웨어가 두 번째 보인 경우와 같이 ``if`` 표현식인 경우에 코드 생성 최적화를 더 쉽게 할 수 있습니다."

#: ../../source/behavior/discrete/if.rst:71
msgid ""
"Note that conditional expressions within both ``if`` statements and "
"``if`` expressions have the potential to generate :ref:`events`."
msgstr ""
"``if`` 문과 ``if`` 표현식 모두에 있는 조건식은 :ref:`이벤트 <events>` 를 생성할 가능성이 있습니다."

#~ msgid "if"
#~ msgstr ""

